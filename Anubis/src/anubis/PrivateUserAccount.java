/*
 * Copyright (C) 2017 user
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package anubis;

import java.io.Serializable;
import java.util.HashSet;

/**
 * All private data associated with an user account, stored in the
 *   SecurityDataModel.
 */
public class PrivateUserAccount implements Serializable {
    private static final long serialVersionUID = 1L;
    
    // ---- User can view these. ----
    
    // User's private e-mail address for password resets.
    public String emailAddress;
    
    // Invitations generated by the user.
    public HashSet<Long> pendingInvitationCodes = new HashSet();
    
    // User's last burnt money receipt.
    public byte[] burnReceipt;
    
    // ---- These are never sent. ---- 
    
    // User's hashed password;
    public StoredPassword password;
    
    // User's session ID. null == no session.
    public Long sessionId;
    
    // Simple rate limiter used by the password reset function
    public int rateLimiterTimestamp;
    public int rateLimiterCounter;
        
    // -----------------------------------------------------------------------

    // Clone the public part to send to the web server for user viewing.
    public PrivateUserAccount cloneForViewing() {
        PrivateUserAccount acc = new PrivateUserAccount();
        acc.emailAddress = this.emailAddress;
        acc.pendingInvitationCodes = this.pendingInvitationCodes;
        acc.burnReceipt = this.burnReceipt;
        return acc;
    }
    
    // Rate limiter: at most "requests" per "minutes"
    public boolean rateLimitExceeded(int minutes, int requests, int nowTimestamp) {
        if (nowTimestamp < rateLimiterTimestamp + minutes) {
            if (rateLimiterCounter >= requests)
                return true;
            else
                ++rateLimiterCounter;
        } else {
            rateLimiterCounter = 1;
            rateLimiterTimestamp = nowTimestamp;
        }
        return false;
    }
}
